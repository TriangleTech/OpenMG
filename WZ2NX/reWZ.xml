<?xml version="1.0"?>
<doc>
    <assembly>
        <name>reWZ</name>
    </assembly>
    <members>
        <member name="T:reWZ.WZVariant">
            <summary>This enum is used to specify the WZ key to be used.</summary>
        </member>
        <member name="F:reWZ.WZVariant.MSEA">
            <summary>MapleStory SEA</summary>
        </member>
        <member name="F:reWZ.WZVariant.KMS">
            <summary>Korea MapleStory</summary>
        </member>
        <member name="F:reWZ.WZVariant.KMST">
            <summary>Korea MapleStory (Tespia)</summary>
        </member>
        <member name="F:reWZ.WZVariant.JMS">
            <summary>Japan MapleStory</summary>
        </member>
        <member name="F:reWZ.WZVariant.JMST">
            <summary>Japan MapleStory (Tespia)</summary>
        </member>
        <member name="F:reWZ.WZVariant.EMS">
            <summary>Europe MapleStory</summary>
        </member>
        <member name="F:reWZ.WZVariant.GMS">
            <summary>Global MapleStory</summary>
        </member>
        <member name="F:reWZ.WZVariant.GMST">
            <summary>Global MapleStory (Tespia)</summary>
        </member>
        <member name="F:reWZ.WZVariant.TMS">
            <summary>Taiwan MapleStory</summary>
        </member>
        <member name="F:reWZ.WZVariant.BMS">
            <summary>Brazil MapleStory</summary>
        </member>
        <member name="F:reWZ.WZVariant.Classic">
            <summary>Classic MapleStory (Data.wz)</summary>
        </member>
        <member name="M:reWZ.WZBinaryReader.Skip(System.Int64)">
            <summary>Advances the position within the backing stream by <paramref name="count" /> .</summary>
            <param name="count"> The amount of bytes to skip. </param>
        </member>
        <member name="M:reWZ.WZBinaryReader.PeekFor(System.Action)">
            <summary>Executes a delegate of type <see cref="T:System.Action" /> , then sets the position of the backing stream back
                to the original value.</summary>
            <param name="result"> The delegate to execute. </param>
        </member>
        <member name="M:reWZ.WZBinaryReader.PeekFor``1(System.Func{``0})">
            <summary>Executes a delegate of type <see cref="T:System.Func`1" /> , then sets the position of the backing stream
                back to the original value.</summary>
            <typeparam name="T"> The return type of the delegate. </typeparam>
            <param name="result"> The delegate to execute. </param>
            <returns> The object returned by the delegate. </returns>
        </member>
        <member name="M:reWZ.WZBinaryReader.ReadWZString(System.Boolean)">
            <summary>Reads a string encoded in WZ format.</summary>
            <param name="encrypted"> Whether the string is encrypted. </param>
            <returns> The read string. </returns>
        </member>
        <member name="M:reWZ.WZBinaryReader.ReadWZStringAtOffset(System.Int64,System.Boolean)">
            <summary>Reads a string encoded in WZ format at a specific offset, then returns the backing stream's position to its
                original value.</summary>
            <param name="offset"> The offset where the string is located. </param>
            <param name="encrypted"> Whether the string is encrypted. </param>
            <returns> The read string. </returns>
        </member>
        <member name="M:reWZ.WZBinaryReader.ReadASCIIString(System.Int32)">
            <summary>Reads a raw and unencrypted ASCII string.</summary>
            <param name="length"> The length of the string. </param>
            <returns> The read string. </returns>
        </member>
        <member name="M:reWZ.WZBinaryReader.ReadWZInt">
            <summary>Reads a WZ-compressed 32-bit integer.</summary>
            <returns> The read integer. </returns>
        </member>
        <member name="M:reWZ.WZBinaryReader.ReadWZLong">
            <summary>Reads a WZ-compressed 64-bit integer.</summary>
            <returns> The read integer. </returns>
        </member>
        <member name="T:reWZ.WZException">
            <summary>An exception thrown when a parsing error occurs.</summary>
        </member>
        <member name="T:reWZ.WZFile">
            <summary>A WZ file.</summary>
        </member>
        <member name="M:reWZ.WZFile.#ctor(System.String,reWZ.WZVariant,System.Boolean,reWZ.WZReadSelection)">
            <summary>Creates and loads a WZ file from a path. The Stream created will be disposed when the WZ file is disposed.</summary>
            <param name="path"> The path where the WZ file is located. </param>
            <param name="variant"> The variant of this WZ file. </param>
            <param name="encrypted"> Whether the WZ file is encrypted outside a WZ image. </param>
            <param name="flag"> WZ parsing flags. </param>
        </member>
        <member name="P:reWZ.WZFile.MainDirectory">
            <summary>The root directory of the WZ file.</summary>
        </member>
        <member name="M:reWZ.WZFile.Finalize">
            <summary>Disposer.</summary>
        </member>
        <member name="M:reWZ.WZFile.ResolvePath(System.String)">
            <summary>Resolves a path in the form "/a/b/c/.././d/e/f/".</summary>
            <param name="path"> The path to resolve. </param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The path has an invalid node.</exception>
        </member>
        <member name="M:reWZ.WZFile.Dispose">
            <summary>Disposes this WZ file.</summary>
        </member>
        <member name="T:reWZ.WZReadSelection">
            <summary>WZ reading flags.</summary>
        </member>
        <member name="F:reWZ.WZReadSelection.None">
            <summary>No flags are enabled, that is, lazy loading of properties and WZ images is enabled.</summary>
        </member>
        <member name="F:reWZ.WZReadSelection.EagerParseStrings">
            <summary>Set this flag to disable lazy loading of string properties.</summary>
        </member>
        <member name="F:reWZ.WZReadSelection.EagerParseAudio">
            <summary>Set this flag to disable lazy loading of Audio properties.</summary>
        </member>
        <member name="F:reWZ.WZReadSelection.EagerParseCanvas">
            <summary>Set this flag to disable lazy loading of canvas properties.</summary>
        </member>
        <member name="F:reWZ.WZReadSelection.NeverParseCanvas">
            <summary>Set this flag to completely disable loading of canvas properties.</summary>
        </member>
        <member name="F:reWZ.WZReadSelection.EagerParseAll">
            <summary>Set this flag to disable lazy loading of string, Audio and canvas properties.</summary>
        </member>
        <member name="F:reWZ.WZReadSelection.EagerParseImage">
            <summary>Set this flag to disable lazy loading of WZ images.</summary>
        </member>
        <member name="T:reWZ.WZProperties.WZAudioProperty">
            <summary>A sound property.</summary>
        </member>
        <member name="P:reWZ.WZProperties.WZAudioProperty.Header">
            <summary>The WAVEFORMATEX header, if present.</summary>
        </member>
        <member name="M:reWZ.WZProperties.WZAudioProperty.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:reWZ.WZProperties.WZImage">
            <summary>A WZ image in a WZ file.</summary>
        </member>
        <member name="P:reWZ.WZProperties.WZImage.Item(System.String)">
            <summary>Returns the child with the name <paramref name="childName" /> .</summary>
            <param name="childName"> The name of the child to return. </param>
            <returns> The retrieved child. </returns>
        </member>
        <member name="P:reWZ.WZProperties.WZImage.ChildCount">
            <summary>Returns the number of children this property contains.</summary>
        </member>
        <member name="M:reWZ.WZProperties.WZImage.HasChild(System.String)">
            <summary>Checks if this property has a child with name <paramref name="name" /> .</summary>
            <param name="name"> The name of the child to locate. </param>
            <returns> true if this property has such a child, false otherwise or if this property cannot contain children. </returns>
        </member>
        <member name="T:reWZ.WZProperties.WZNothing">
            <summary>A struct used to represent nothing.</summary>
        </member>
        <member name="T:reWZ.WZProperties.WZNullProperty">
            <summary>Null.</summary>
        </member>
        <member name="T:reWZ.WZProperties.WZUInt16Property">
            <summary>An unsigned 16-bit integer property.</summary>
        </member>
        <member name="T:reWZ.WZProperties.WZInt32Property">
            <summary>A compressed signed 32-bit integer property.</summary>
        </member>
        <member name="T:reWZ.WZProperties.WZInt64Property">
            <summary>A compressed signed 64-bit integer property.</summary>
        </member>
        <member name="T:reWZ.WZProperties.WZSingleProperty">
            <summary>A floating point number with single precision property.</summary>
        </member>
        <member name="T:reWZ.WZProperties.WZDoubleProperty">
            <summary>A floating point number with double precision property.</summary>
        </member>
        <member name="T:reWZ.WZProperties.WZStringProperty">
            <summary>A string property.</summary>
        </member>
        <member name="T:reWZ.WZProperties.WZPointProperty">
            <summary>A point property, containing an X and Y value pair.</summary>
        </member>
        <member name="T:reWZ.WZProperties.WZUOLProperty">
            <summary>A link property, used to link to other properties in the WZ file.</summary>
        </member>
        <member name="P:reWZ.WZProperties.WZUOLProperty.Target">
            <summary>Returns the <see cref="T:reWZ.WZProperties.WZObject" /> that is directly pointed to by this UOL.</summary>
        </member>
        <member name="T:reWZ.WZProperties.WZCanvasProperty">
            <summary>A bitmap property, containing an image, and children.</summary>
        </member>
        <member name="M:reWZ.WZProperties.WZCanvasProperty.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="T:reWZ.WZProperties.WZDirectory">
            <summary>A directory in a WZ file. This cannot be located inside an Image file.</summary>
        </member>
        <member name="T:reWZ.WZProperties.WZObject">
            <summary>An object in a WZ file.</summary>
        </member>
        <member name="P:reWZ.WZProperties.WZObject.Name">
            <summary>The name of the WZ object.</summary>
        </member>
        <member name="P:reWZ.WZProperties.WZObject.Parent">
            <summary>The parent of this WZ object, or <code>null</code> if this is the main WZ directory.</summary>
        </member>
        <member name="P:reWZ.WZProperties.WZObject.Path">
            <summary>The absolute path to this object.</summary>
        </member>
        <member name="P:reWZ.WZProperties.WZObject.File">
            <summary>The WZ file containing this object.</summary>
        </member>
        <member name="P:reWZ.WZProperties.WZObject.Type">
            <summary>The type of this object.</summary>
        </member>
        <member name="P:reWZ.WZProperties.WZObject.Item(System.String)">
            <summary>Returns the child with the name <paramref name="childName" /> .</summary>
            <param name="childName"> The name of the child to return. </param>
            <returns> The retrieved child. </returns>
        </member>
        <member name="P:reWZ.WZProperties.WZObject.ChildCount">
            <summary>Returns the number of children this property contains.</summary>
        </member>
        <member name="M:reWZ.WZProperties.WZObject.HasChild(System.String)">
            <summary>Checks if this property has a child with name <paramref name="name" /> .</summary>
            <param name="name"> The name of the child to locate. </param>
            <returns> true if this property has such a child, false otherwise or if this property cannot contain children. </returns>
        </member>
        <member name="M:reWZ.WZProperties.WZObject.ValueOrDie``1">
            <summary>Tries to cast this to a <see cref="T:reWZ.WZProperties.WZProperty`1" /> and returns its value, or throws an exception if the cast
                is invalid.</summary>
            <typeparam name="T"> The type of the value to return. </typeparam>
            <exception cref="T:System.InvalidCastException">This WZ object is not a
                <see cref="T:reWZ.WZProperties.WZProperty`1" />
                .</exception>
            <returns> The value enclosed by this WZ property. </returns>
        </member>
        <member name="M:reWZ.WZProperties.WZObject.ValueOrDefault``1(``0)">
            <summary>Tries to cast this to a <see cref="T:reWZ.WZProperties.WZProperty`1" /> and returns its value, or returns a default value if the
                cast is invalid.</summary>
            <param name="default"> The value to return if the cast is unsuccessful. </param>
            <typeparam name="T"> The type of the value to return. </typeparam>
            <returns> The value enclosed by this WZ property, or the default value. </returns>
        </member>
        <member name="M:reWZ.WZProperties.WZObject.ResolvePath(System.String)">
            <summary>Resolves a path in the form "/a/b/c/.././d/e/f/".</summary>
            <param name="path"> The path to resolve. </param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The path has an invalid node.</exception>
            <returns> The object located at the path. </returns>
        </member>
        <member name="M:reWZ.WZProperties.WZObject.GetEnumerator">
            <summary>Returns an enumerator that iterates through the children in this property.</summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the children
                in this property.</returns>
        </member>
        <member name="T:reWZ.WZProperties.WZDelayedProperty`1">
            <summary>Ab abstract class representing a WZ property that contains a value of type <typeparamref name="T" /> and is
                lazy-loaded.</summary>
            <typeparam name="T">The type that this property contains.</typeparam>
        </member>
        <member name="F:reWZ.WZProperties.WZDelayedProperty`1._parsed">
            <summary>Whether the delayed property has been parsed.</summary>
        </member>
        <member name="P:reWZ.WZProperties.WZDelayedProperty`1.Value">
            <summary>The value held by this WZ property.</summary>
        </member>
        <member name="T:reWZ.WZProperties.WZProperty`1">
            <summary>An abstract class representing a WZ property that contains a value of type <typeparamref name="T" /> .</summary>
            <typeparam name="T"> The type that this property contains. </typeparam>
        </member>
        <member name="P:reWZ.WZProperties.WZProperty`1.Value">
            <summary>The value held by this WZ property.</summary>
        </member>
        <member name="P:reWZ.WZProperties.WZProperty`1.Image">
            <summary>The image that this property resides in.</summary>
        </member>
        <member name="T:reWZ.WZProperties.WZSubProperty">
            <summary>A directory in a WZ image. This cannot be located outside an image.</summary>
        </member>
        <member name="T:reWZ.WZProperties.WZConvexProperty">
            <summary>A "Convex" property, containing multiple nameless WZ properties.</summary>
        </member>
        <member name="M:UsefulThings.ByteArrayPointer.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:UsefulThings.MemoryMappedFile.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
    </members>
</doc>
